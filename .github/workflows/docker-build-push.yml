name: Docker Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  ORGRANITION: dev-in-black
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORGRANITION }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.title=MCP Text Processing Server
            org.opencontainers.image.description=A comprehensive Model Context Protocol (MCP) Python text processing server built with FastMCP and SSE streaming capabilities
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.ORGRANITION }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: true

      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Test the built image
          docker run --rm -d --name test-container \
            -p 8000:8000 -p 8080:8080 \
            ${{ env.REGISTRY }}/${{ env.ORGRANITION }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to start
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          
          # Clean up
          docker stop test-container

      - name: Image scan
        if: github.event_name != 'pull_request'
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.ORGRANITION }}/${{ env.IMAGE_NAME }}:latest
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true

      - name: Upload scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
